//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package lrodataplanegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// LROsDataplaneClient contains the methods for the LROsDataplane group.
// Don't use this type directly, use NewLROsDataplaneClient() instead.
type LROsDataplaneClient struct {
	pl runtime.Pipeline
}

// NewLROsDataplaneClient creates a new instance of LROsDataplaneClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewLROsDataplaneClient(pl runtime.Pipeline) *LROsDataplaneClient {
	client := &LROsDataplaneClient{
		pl: pl,
	}
	return client
}

// BeginPostOplocSucceeded - Operation-Location polling success case
// If the operation fails it returns an *azcore.ResponseError type.
// resultID - any string value
// options - LROsDataplaneClientBeginPostOplocSucceededOptions contains the optional parameters for the LROsDataplaneClient.BeginPostOplocSucceeded
// method.
func (client *LROsDataplaneClient) BeginPostOplocSucceeded(ctx context.Context, resultID string, options *LROsDataplaneClientBeginPostOplocSucceededOptions) (*runtime.Poller[LROsDataplaneClientPostOplocSucceededResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.postOplocSucceeded(ctx, resultID, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[LROsDataplaneClientPostOplocSucceededResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[LROsDataplaneClientPostOplocSucceededResponse](options.ResumeToken, client.pl, nil)
	}
}

// PostOplocSucceeded - Operation-Location polling success case
// If the operation fails it returns an *azcore.ResponseError type.
func (client *LROsDataplaneClient) postOplocSucceeded(ctx context.Context, resultID string, options *LROsDataplaneClientBeginPostOplocSucceededOptions) (*http.Response, error) {
	req, err := client.postOplocSucceededCreateRequest(ctx, resultID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// postOplocSucceededCreateRequest creates the PostOplocSucceeded request.
func (client *LROsDataplaneClient) postOplocSucceededCreateRequest(ctx context.Context, resultID string, options *LROsDataplaneClientBeginPostOplocSucceededOptions) (*policy.Request, error) {
	urlPath := "/lrodataplane/post/oploc/succeeded"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("resultId", resultID)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}
