//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package formdatagroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"io"
	"net/http"
)

// FormdataClient contains the methods for the Formdata group.
// Don't use this type directly, use a constructor function instead.
type FormdataClient struct {
	internal *azcore.Client
}

// UploadFile - Upload file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - fileContent - File to upload.
//   - fileName - File name to upload. Name has to be spelled exactly as written here.
//   - options - FormdataClientUploadFileOptions contains the optional parameters for the FormdataClient.UploadFile method.
func (client *FormdataClient) UploadFile(ctx context.Context, fileContent io.ReadSeekCloser, fileName string, options *FormdataClientUploadFileOptions) (result FormdataClientUploadFileResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FormdataClient.UploadFile", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.uploadFileCreateRequest(ctx, fileContent, fileName, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// uploadFileCreateRequest creates the UploadFile request.
func (client *FormdataClient) uploadFileCreateRequest(ctx context.Context, fileContent io.ReadSeekCloser, fileName string, options *FormdataClientUploadFileOptions) (*policy.Request, error) {
	urlPath := "/formdata/stream/uploadfile"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"application/octet-stream, application/json"}
	if err := runtime.SetMultipartFormData(req, map[string]any{
		"fileContent": fileContent,
		"fileName":    fileName,
	}); err != nil {
		return nil, err
	}
	return req, nil
}

// UploadFileViaBody - Upload file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - fileContent - File to upload.
//   - options - FormdataClientUploadFileViaBodyOptions contains the optional parameters for the FormdataClient.UploadFileViaBody
//     method.
func (client *FormdataClient) UploadFileViaBody(ctx context.Context, fileContent io.ReadSeekCloser, options *FormdataClientUploadFileViaBodyOptions) (result FormdataClientUploadFileViaBodyResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FormdataClient.UploadFileViaBody", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.uploadFileViaBodyCreateRequest(ctx, fileContent, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// uploadFileViaBodyCreateRequest creates the UploadFileViaBody request.
func (client *FormdataClient) uploadFileViaBodyCreateRequest(ctx context.Context, fileContent io.ReadSeekCloser, options *FormdataClientUploadFileViaBodyOptions) (*policy.Request, error) {
	urlPath := "/formdata/stream/uploadfile"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"application/octet-stream, application/json"}
	return req, req.SetBody(fileContent, "application/octet-stream")
}

// UploadFiles - Upload multiple files
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - fileContent - Files to upload.
//   - options - FormdataClientUploadFilesOptions contains the optional parameters for the FormdataClient.UploadFiles method.
func (client *FormdataClient) UploadFiles(ctx context.Context, fileContent []io.ReadSeekCloser, options *FormdataClientUploadFilesOptions) (result FormdataClientUploadFilesResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FormdataClient.UploadFiles", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.uploadFilesCreateRequest(ctx, fileContent, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// uploadFilesCreateRequest creates the UploadFiles request.
func (client *FormdataClient) uploadFilesCreateRequest(ctx context.Context, fileContent []io.ReadSeekCloser, options *FormdataClientUploadFilesOptions) (*policy.Request, error) {
	urlPath := "/formdata/stream/uploadfiles"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"application/octet-stream, application/json"}
	if err := runtime.SetMultipartFormData(req, map[string]any{
		"fileContent": fileContent,
	}); err != nil {
		return nil, err
	}
	return req, nil
}
