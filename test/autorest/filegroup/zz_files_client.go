//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package filegroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// FilesClient contains the methods for the Files group.
// Don't use this type directly, use a constructor function instead.
type FilesClient struct {
	internal *azcore.Client
}

// GetEmptyFile - Get empty file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - FilesClientGetEmptyFileOptions contains the optional parameters for the FilesClient.GetEmptyFile method.
func (client *FilesClient) GetEmptyFile(ctx context.Context, options *FilesClientGetEmptyFileOptions) (result FilesClientGetEmptyFileResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FilesClient.GetEmptyFile", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getEmptyFileCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// getEmptyFileCreateRequest creates the GetEmptyFile request.
func (client *FilesClient) getEmptyFileCreateRequest(ctx context.Context, options *FilesClientGetEmptyFileOptions) (*policy.Request, error) {
	urlPath := "/files/stream/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"image/png, application/json"}
	return req, nil
}

// GetFile - Get file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - FilesClientGetFileOptions contains the optional parameters for the FilesClient.GetFile method.
func (client *FilesClient) GetFile(ctx context.Context, options *FilesClientGetFileOptions) (result FilesClientGetFileResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FilesClient.GetFile", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getFileCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// getFileCreateRequest creates the GetFile request.
func (client *FilesClient) getFileCreateRequest(ctx context.Context, options *FilesClientGetFileOptions) (*policy.Request, error) {
	urlPath := "/files/stream/nonempty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"image/png, application/json"}
	return req, nil
}

// GetFileLarge - Get a large file
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - FilesClientGetFileLargeOptions contains the optional parameters for the FilesClient.GetFileLarge method.
func (client *FilesClient) GetFileLarge(ctx context.Context, options *FilesClientGetFileLargeOptions) (result FilesClientGetFileLargeResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FilesClient.GetFileLarge", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getFileLargeCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result.Body = resp.Body
	return
}

// getFileLargeCreateRequest creates the GetFileLarge request.
func (client *FilesClient) getFileLargeCreateRequest(ctx context.Context, options *FilesClientGetFileLargeOptions) (*policy.Request, error) {
	urlPath := "/files/stream/verylarge"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	runtime.SkipBodyDownload(req)
	req.Raw().Header["Accept"] = []string{"image/png, application/json"}
	return req, nil
}
