//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// InheritanceClient contains the methods for the Inheritance group.
// Don't use this type directly, use a constructor function instead.
type InheritanceClient struct {
	internal *azcore.Client
}

// GetValid - Get complex types that extend others
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - InheritanceClientGetValidOptions contains the optional parameters for the InheritanceClient.GetValid method.
func (client *InheritanceClient) GetValid(ctx context.Context, options *InheritanceClientGetValidOptions) (result InheritanceClientGetValidResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "InheritanceClient.GetValid", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getValidCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getValidHandleResponse(resp)
	return
}

// getValidCreateRequest creates the GetValid request.
func (client *InheritanceClient) getValidCreateRequest(ctx context.Context, options *InheritanceClientGetValidOptions) (*policy.Request, error) {
	urlPath := "/complex/inheritance/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *InheritanceClient) getValidHandleResponse(resp *http.Response) (result InheritanceClientGetValidResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Siamese); err != nil {
		result = InheritanceClientGetValidResponse{}
		return
	}
	return result, nil
}

// PutValid - Put complex types that extend others
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one
//     named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and
//     food="french fries".
//   - options - InheritanceClientPutValidOptions contains the optional parameters for the InheritanceClient.PutValid method.
func (client *InheritanceClient) PutValid(ctx context.Context, complexBody Siamese, options *InheritanceClientPutValidOptions) (result InheritanceClientPutValidResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "InheritanceClient.PutValid", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putValidCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putValidCreateRequest creates the PutValid request.
func (client *InheritanceClient) putValidCreateRequest(ctx context.Context, complexBody Siamese, options *InheritanceClientPutValidOptions) (*policy.Request, error) {
	urlPath := "/complex/inheritance/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}
