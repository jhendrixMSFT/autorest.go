//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// PrimitiveClient contains the methods for the Primitive group.
// Don't use this type directly, use a constructor function instead.
type PrimitiveClient struct {
	internal *azcore.Client
}

// GetBool - Get complex types with bool properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetBoolOptions contains the optional parameters for the PrimitiveClient.GetBool method.
func (client *PrimitiveClient) GetBool(ctx context.Context, options *PrimitiveClientGetBoolOptions) (result PrimitiveClientGetBoolResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetBool", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getBoolCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getBoolHandleResponse(resp)
	return
}

// getBoolCreateRequest creates the GetBool request.
func (client *PrimitiveClient) getBoolCreateRequest(ctx context.Context, options *PrimitiveClientGetBoolOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/bool"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getBoolHandleResponse handles the GetBool response.
func (client *PrimitiveClient) getBoolHandleResponse(resp *http.Response) (result PrimitiveClientGetBoolResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.BooleanWrapper); err != nil {
		result = PrimitiveClientGetBoolResponse{}
		return
	}
	return result, nil
}

// GetByte - Get complex types with byte properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetByteOptions contains the optional parameters for the PrimitiveClient.GetByte method.
func (client *PrimitiveClient) GetByte(ctx context.Context, options *PrimitiveClientGetByteOptions) (result PrimitiveClientGetByteResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetByte", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getByteCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getByteHandleResponse(resp)
	return
}

// getByteCreateRequest creates the GetByte request.
func (client *PrimitiveClient) getByteCreateRequest(ctx context.Context, options *PrimitiveClientGetByteOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/byte"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getByteHandleResponse handles the GetByte response.
func (client *PrimitiveClient) getByteHandleResponse(resp *http.Response) (result PrimitiveClientGetByteResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.ByteWrapper); err != nil {
		result = PrimitiveClientGetByteResponse{}
		return
	}
	return result, nil
}

// GetDate - Get complex types with date properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetDateOptions contains the optional parameters for the PrimitiveClient.GetDate method.
func (client *PrimitiveClient) GetDate(ctx context.Context, options *PrimitiveClientGetDateOptions) (result PrimitiveClientGetDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getDateHandleResponse(resp)
	return
}

// getDateCreateRequest creates the GetDate request.
func (client *PrimitiveClient) getDateCreateRequest(ctx context.Context, options *PrimitiveClientGetDateOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/date"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDateHandleResponse handles the GetDate response.
func (client *PrimitiveClient) getDateHandleResponse(resp *http.Response) (result PrimitiveClientGetDateResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DateWrapper); err != nil {
		result = PrimitiveClientGetDateResponse{}
		return
	}
	return result, nil
}

// GetDateTime - Get complex types with datetime properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetDateTimeOptions contains the optional parameters for the PrimitiveClient.GetDateTime method.
func (client *PrimitiveClient) GetDateTime(ctx context.Context, options *PrimitiveClientGetDateTimeOptions) (result PrimitiveClientGetDateTimeResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetDateTime", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getDateTimeCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getDateTimeHandleResponse(resp)
	return
}

// getDateTimeCreateRequest creates the GetDateTime request.
func (client *PrimitiveClient) getDateTimeCreateRequest(ctx context.Context, options *PrimitiveClientGetDateTimeOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDateTimeHandleResponse handles the GetDateTime response.
func (client *PrimitiveClient) getDateTimeHandleResponse(resp *http.Response) (result PrimitiveClientGetDateTimeResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DatetimeWrapper); err != nil {
		result = PrimitiveClientGetDateTimeResponse{}
		return
	}
	return result, nil
}

// GetDateTimeRFC1123 - Get complex types with datetimeRfc1123 properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.GetDateTimeRFC1123
//     method.
func (client *PrimitiveClient) GetDateTimeRFC1123(ctx context.Context, options *PrimitiveClientGetDateTimeRFC1123Options) (result PrimitiveClientGetDateTimeRFC1123Response, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetDateTimeRFC1123", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getDateTimeRFC1123CreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getDateTimeRFC1123HandleResponse(resp)
	return
}

// getDateTimeRFC1123CreateRequest creates the GetDateTimeRFC1123 request.
func (client *PrimitiveClient) getDateTimeRFC1123CreateRequest(ctx context.Context, options *PrimitiveClientGetDateTimeRFC1123Options) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetimerfc1123"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDateTimeRFC1123HandleResponse handles the GetDateTimeRFC1123 response.
func (client *PrimitiveClient) getDateTimeRFC1123HandleResponse(resp *http.Response) (result PrimitiveClientGetDateTimeRFC1123Response, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Datetimerfc1123Wrapper); err != nil {
		result = PrimitiveClientGetDateTimeRFC1123Response{}
		return
	}
	return result, nil
}

// GetDouble - Get complex types with double properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetDoubleOptions contains the optional parameters for the PrimitiveClient.GetDouble method.
func (client *PrimitiveClient) GetDouble(ctx context.Context, options *PrimitiveClientGetDoubleOptions) (result PrimitiveClientGetDoubleResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetDouble", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getDoubleCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getDoubleHandleResponse(resp)
	return
}

// getDoubleCreateRequest creates the GetDouble request.
func (client *PrimitiveClient) getDoubleCreateRequest(ctx context.Context, options *PrimitiveClientGetDoubleOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/double"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDoubleHandleResponse handles the GetDouble response.
func (client *PrimitiveClient) getDoubleHandleResponse(resp *http.Response) (result PrimitiveClientGetDoubleResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DoubleWrapper); err != nil {
		result = PrimitiveClientGetDoubleResponse{}
		return
	}
	return result, nil
}

// GetDuration - Get complex types with duration properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetDurationOptions contains the optional parameters for the PrimitiveClient.GetDuration method.
func (client *PrimitiveClient) GetDuration(ctx context.Context, options *PrimitiveClientGetDurationOptions) (result PrimitiveClientGetDurationResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetDuration", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getDurationCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getDurationHandleResponse(resp)
	return
}

// getDurationCreateRequest creates the GetDuration request.
func (client *PrimitiveClient) getDurationCreateRequest(ctx context.Context, options *PrimitiveClientGetDurationOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/duration"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getDurationHandleResponse handles the GetDuration response.
func (client *PrimitiveClient) getDurationHandleResponse(resp *http.Response) (result PrimitiveClientGetDurationResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DurationWrapper); err != nil {
		result = PrimitiveClientGetDurationResponse{}
		return
	}
	return result, nil
}

// GetFloat - Get complex types with float properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetFloatOptions contains the optional parameters for the PrimitiveClient.GetFloat method.
func (client *PrimitiveClient) GetFloat(ctx context.Context, options *PrimitiveClientGetFloatOptions) (result PrimitiveClientGetFloatResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetFloat", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getFloatCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getFloatHandleResponse(resp)
	return
}

// getFloatCreateRequest creates the GetFloat request.
func (client *PrimitiveClient) getFloatCreateRequest(ctx context.Context, options *PrimitiveClientGetFloatOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/float"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFloatHandleResponse handles the GetFloat response.
func (client *PrimitiveClient) getFloatHandleResponse(resp *http.Response) (result PrimitiveClientGetFloatResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.FloatWrapper); err != nil {
		result = PrimitiveClientGetFloatResponse{}
		return
	}
	return result, nil
}

// GetInt - Get complex types with integer properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetIntOptions contains the optional parameters for the PrimitiveClient.GetInt method.
func (client *PrimitiveClient) GetInt(ctx context.Context, options *PrimitiveClientGetIntOptions) (result PrimitiveClientGetIntResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetInt", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getIntCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getIntHandleResponse(resp)
	return
}

// getIntCreateRequest creates the GetInt request.
func (client *PrimitiveClient) getIntCreateRequest(ctx context.Context, options *PrimitiveClientGetIntOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/integer"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getIntHandleResponse handles the GetInt response.
func (client *PrimitiveClient) getIntHandleResponse(resp *http.Response) (result PrimitiveClientGetIntResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.IntWrapper); err != nil {
		result = PrimitiveClientGetIntResponse{}
		return
	}
	return result, nil
}

// GetLong - Get complex types with long properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetLongOptions contains the optional parameters for the PrimitiveClient.GetLong method.
func (client *PrimitiveClient) GetLong(ctx context.Context, options *PrimitiveClientGetLongOptions) (result PrimitiveClientGetLongResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetLong", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getLongCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getLongHandleResponse(resp)
	return
}

// getLongCreateRequest creates the GetLong request.
func (client *PrimitiveClient) getLongCreateRequest(ctx context.Context, options *PrimitiveClientGetLongOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/long"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLongHandleResponse handles the GetLong response.
func (client *PrimitiveClient) getLongHandleResponse(resp *http.Response) (result PrimitiveClientGetLongResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.LongWrapper); err != nil {
		result = PrimitiveClientGetLongResponse{}
		return
	}
	return result, nil
}

// GetString - Get complex types with string properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - PrimitiveClientGetStringOptions contains the optional parameters for the PrimitiveClient.GetString method.
func (client *PrimitiveClient) GetString(ctx context.Context, options *PrimitiveClientGetStringOptions) (result PrimitiveClientGetStringResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.GetString", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getStringCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getStringHandleResponse(resp)
	return
}

// getStringCreateRequest creates the GetString request.
func (client *PrimitiveClient) getStringCreateRequest(ctx context.Context, options *PrimitiveClientGetStringOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/string"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStringHandleResponse handles the GetString response.
func (client *PrimitiveClient) getStringHandleResponse(resp *http.Response) (result PrimitiveClientGetStringResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.StringWrapper); err != nil {
		result = PrimitiveClientGetStringResponse{}
		return
	}
	return result, nil
}

// PutBool - Put complex types with bool properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put true and false
//   - options - PrimitiveClientPutBoolOptions contains the optional parameters for the PrimitiveClient.PutBool method.
func (client *PrimitiveClient) PutBool(ctx context.Context, complexBody BooleanWrapper, options *PrimitiveClientPutBoolOptions) (result PrimitiveClientPutBoolResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutBool", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putBoolCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putBoolCreateRequest creates the PutBool request.
func (client *PrimitiveClient) putBoolCreateRequest(ctx context.Context, complexBody BooleanWrapper, options *PrimitiveClientPutBoolOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/bool"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutByte - Put complex types with byte properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
//   - options - PrimitiveClientPutByteOptions contains the optional parameters for the PrimitiveClient.PutByte method.
func (client *PrimitiveClient) PutByte(ctx context.Context, complexBody ByteWrapper, options *PrimitiveClientPutByteOptions) (result PrimitiveClientPutByteResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutByte", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putByteCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putByteCreateRequest creates the PutByte request.
func (client *PrimitiveClient) putByteCreateRequest(ctx context.Context, complexBody ByteWrapper, options *PrimitiveClientPutByteOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/byte"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutDate - Put complex types with date properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put '0001-01-01' and '2016-02-29'
//   - options - PrimitiveClientPutDateOptions contains the optional parameters for the PrimitiveClient.PutDate method.
func (client *PrimitiveClient) PutDate(ctx context.Context, complexBody DateWrapper, options *PrimitiveClientPutDateOptions) (result PrimitiveClientPutDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putDateCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putDateCreateRequest creates the PutDate request.
func (client *PrimitiveClient) putDateCreateRequest(ctx context.Context, complexBody DateWrapper, options *PrimitiveClientPutDateOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/date"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutDateTime - Put complex types with datetime properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
//   - options - PrimitiveClientPutDateTimeOptions contains the optional parameters for the PrimitiveClient.PutDateTime method.
func (client *PrimitiveClient) PutDateTime(ctx context.Context, complexBody DatetimeWrapper, options *PrimitiveClientPutDateTimeOptions) (result PrimitiveClientPutDateTimeResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutDateTime", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putDateTimeCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putDateTimeCreateRequest creates the PutDateTime request.
func (client *PrimitiveClient) putDateTimeCreateRequest(ctx context.Context, complexBody DatetimeWrapper, options *PrimitiveClientPutDateTimeOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetime"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutDateTimeRFC1123 - Put complex types with datetimeRfc1123 properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
//   - options - PrimitiveClientPutDateTimeRFC1123Options contains the optional parameters for the PrimitiveClient.PutDateTimeRFC1123
//     method.
func (client *PrimitiveClient) PutDateTimeRFC1123(ctx context.Context, complexBody Datetimerfc1123Wrapper, options *PrimitiveClientPutDateTimeRFC1123Options) (result PrimitiveClientPutDateTimeRFC1123Response, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutDateTimeRFC1123", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putDateTimeRFC1123CreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putDateTimeRFC1123CreateRequest creates the PutDateTimeRFC1123 request.
func (client *PrimitiveClient) putDateTimeRFC1123CreateRequest(ctx context.Context, complexBody Datetimerfc1123Wrapper, options *PrimitiveClientPutDateTimeRFC1123Options) (*policy.Request, error) {
	urlPath := "/complex/primitive/datetimerfc1123"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutDouble - Put complex types with double properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
//   - options - PrimitiveClientPutDoubleOptions contains the optional parameters for the PrimitiveClient.PutDouble method.
func (client *PrimitiveClient) PutDouble(ctx context.Context, complexBody DoubleWrapper, options *PrimitiveClientPutDoubleOptions) (result PrimitiveClientPutDoubleResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutDouble", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putDoubleCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putDoubleCreateRequest creates the PutDouble request.
func (client *PrimitiveClient) putDoubleCreateRequest(ctx context.Context, complexBody DoubleWrapper, options *PrimitiveClientPutDoubleOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/double"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutDuration - Put complex types with duration properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 'P123DT22H14M12.011S'
//   - options - PrimitiveClientPutDurationOptions contains the optional parameters for the PrimitiveClient.PutDuration method.
func (client *PrimitiveClient) PutDuration(ctx context.Context, complexBody DurationWrapper, options *PrimitiveClientPutDurationOptions) (result PrimitiveClientPutDurationResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutDuration", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putDurationCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putDurationCreateRequest creates the PutDuration request.
func (client *PrimitiveClient) putDurationCreateRequest(ctx context.Context, complexBody DurationWrapper, options *PrimitiveClientPutDurationOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/duration"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutFloat - Put complex types with float properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 1.05 and -0.003
//   - options - PrimitiveClientPutFloatOptions contains the optional parameters for the PrimitiveClient.PutFloat method.
func (client *PrimitiveClient) PutFloat(ctx context.Context, complexBody FloatWrapper, options *PrimitiveClientPutFloatOptions) (result PrimitiveClientPutFloatResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutFloat", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putFloatCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putFloatCreateRequest creates the PutFloat request.
func (client *PrimitiveClient) putFloatCreateRequest(ctx context.Context, complexBody FloatWrapper, options *PrimitiveClientPutFloatOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/float"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutInt - Put complex types with integer properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put -1 and 2
//   - options - PrimitiveClientPutIntOptions contains the optional parameters for the PrimitiveClient.PutInt method.
func (client *PrimitiveClient) PutInt(ctx context.Context, complexBody IntWrapper, options *PrimitiveClientPutIntOptions) (result PrimitiveClientPutIntResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutInt", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putIntCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putIntCreateRequest creates the PutInt request.
func (client *PrimitiveClient) putIntCreateRequest(ctx context.Context, complexBody IntWrapper, options *PrimitiveClientPutIntOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/integer"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutLong - Put complex types with long properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 1099511627775 and -999511627788
//   - options - PrimitiveClientPutLongOptions contains the optional parameters for the PrimitiveClient.PutLong method.
func (client *PrimitiveClient) PutLong(ctx context.Context, complexBody LongWrapper, options *PrimitiveClientPutLongOptions) (result PrimitiveClientPutLongResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutLong", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putLongCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putLongCreateRequest creates the PutLong request.
func (client *PrimitiveClient) putLongCreateRequest(ctx context.Context, complexBody LongWrapper, options *PrimitiveClientPutLongOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/long"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutString - Put complex types with string properties
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put 'goodrequest', ”, and null
//   - options - PrimitiveClientPutStringOptions contains the optional parameters for the PrimitiveClient.PutString method.
func (client *PrimitiveClient) PutString(ctx context.Context, complexBody StringWrapper, options *PrimitiveClientPutStringOptions) (result PrimitiveClientPutStringResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "PrimitiveClient.PutString", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putStringCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putStringCreateRequest creates the PutString request.
func (client *PrimitiveClient) putStringCreateRequest(ctx context.Context, complexBody StringWrapper, options *PrimitiveClientPutStringOptions) (*policy.Request, error) {
	urlPath := "/complex/primitive/string"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}
