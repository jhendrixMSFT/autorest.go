//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package complexgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// DictionaryClient contains the methods for the Dictionary group.
// Don't use this type directly, use a constructor function instead.
type DictionaryClient struct {
	internal *azcore.Client
}

// GetEmpty - Get complex types with dictionary property which is empty
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - DictionaryClientGetEmptyOptions contains the optional parameters for the DictionaryClient.GetEmpty method.
func (client *DictionaryClient) GetEmpty(ctx context.Context, options *DictionaryClientGetEmptyOptions) (result DictionaryClientGetEmptyResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.GetEmpty", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getEmptyCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getEmptyHandleResponse(resp)
	return
}

// getEmptyCreateRequest creates the GetEmpty request.
func (client *DictionaryClient) getEmptyCreateRequest(ctx context.Context, options *DictionaryClientGetEmptyOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/empty"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getEmptyHandleResponse handles the GetEmpty response.
func (client *DictionaryClient) getEmptyHandleResponse(resp *http.Response) (result DictionaryClientGetEmptyResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DictionaryWrapper); err != nil {
		result = DictionaryClientGetEmptyResponse{}
		return
	}
	return result, nil
}

// GetNotProvided - Get complex types with dictionary property while server doesn't provide a response payload
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - DictionaryClientGetNotProvidedOptions contains the optional parameters for the DictionaryClient.GetNotProvided
//     method.
func (client *DictionaryClient) GetNotProvided(ctx context.Context, options *DictionaryClientGetNotProvidedOptions) (result DictionaryClientGetNotProvidedResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.GetNotProvided", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getNotProvidedCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getNotProvidedHandleResponse(resp)
	return
}

// getNotProvidedCreateRequest creates the GetNotProvided request.
func (client *DictionaryClient) getNotProvidedCreateRequest(ctx context.Context, options *DictionaryClientGetNotProvidedOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/notprovided"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNotProvidedHandleResponse handles the GetNotProvided response.
func (client *DictionaryClient) getNotProvidedHandleResponse(resp *http.Response) (result DictionaryClientGetNotProvidedResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DictionaryWrapper); err != nil {
		result = DictionaryClientGetNotProvidedResponse{}
		return
	}
	return result, nil
}

// GetNull - Get complex types with dictionary property which is null
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - DictionaryClientGetNullOptions contains the optional parameters for the DictionaryClient.GetNull method.
func (client *DictionaryClient) GetNull(ctx context.Context, options *DictionaryClientGetNullOptions) (result DictionaryClientGetNullResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.GetNull", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getNullHandleResponse(resp)
	return
}

// getNullCreateRequest creates the GetNull request.
func (client *DictionaryClient) getNullCreateRequest(ctx context.Context, options *DictionaryClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *DictionaryClient) getNullHandleResponse(resp *http.Response) (result DictionaryClientGetNullResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DictionaryWrapper); err != nil {
		result = DictionaryClientGetNullResponse{}
		return
	}
	return result, nil
}

// GetValid - Get complex types with dictionary property
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - options - DictionaryClientGetValidOptions contains the optional parameters for the DictionaryClient.GetValid method.
func (client *DictionaryClient) GetValid(ctx context.Context, options *DictionaryClientGetValidOptions) (result DictionaryClientGetValidResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.GetValid", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getValidCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getValidHandleResponse(resp)
	return
}

// getValidCreateRequest creates the GetValid request.
func (client *DictionaryClient) getValidCreateRequest(ctx context.Context, options *DictionaryClientGetValidOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/valid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getValidHandleResponse handles the GetValid response.
func (client *DictionaryClient) getValidHandleResponse(resp *http.Response) (result DictionaryClientGetValidResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.DictionaryWrapper); err != nil {
		result = DictionaryClientGetValidResponse{}
		return
	}
	return result, nil
}

// PutEmpty - Put complex types with dictionary property which is empty
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put an empty dictionary
//   - options - DictionaryClientPutEmptyOptions contains the optional parameters for the DictionaryClient.PutEmpty method.
func (client *DictionaryClient) PutEmpty(ctx context.Context, complexBody DictionaryWrapper, options *DictionaryClientPutEmptyOptions) (result DictionaryClientPutEmptyResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.PutEmpty", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putEmptyCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putEmptyCreateRequest creates the PutEmpty request.
func (client *DictionaryClient) putEmptyCreateRequest(ctx context.Context, complexBody DictionaryWrapper, options *DictionaryClientPutEmptyOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/empty"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}

// PutValid - Put complex types with dictionary property
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2016-02-29
//   - complexBody - Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"",
//     "":null
//   - options - DictionaryClientPutValidOptions contains the optional parameters for the DictionaryClient.PutValid method.
func (client *DictionaryClient) PutValid(ctx context.Context, complexBody DictionaryWrapper, options *DictionaryClientPutValidOptions) (result DictionaryClientPutValidResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DictionaryClient.PutValid", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putValidCreateRequest(ctx, complexBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putValidCreateRequest creates the PutValid request.
func (client *DictionaryClient) putValidCreateRequest(ctx context.Context, complexBody DictionaryWrapper, options *DictionaryClientPutValidOptions) (*policy.Request, error) {
	urlPath := "/complex/dictionary/typed/valid"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, complexBody)
}
