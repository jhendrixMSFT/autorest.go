//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package booleangroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// BoolClient contains the methods for the Bool group.
// Don't use this type directly, use a constructor function instead.
type BoolClient struct {
	internal *azcore.Client
}

// GetFalse - Get false Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientGetFalseOptions contains the optional parameters for the BoolClient.GetFalse method.
func (client *BoolClient) GetFalse(ctx context.Context, options *BoolClientGetFalseOptions) (result BoolClientGetFalseResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.GetFalse", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getFalseCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getFalseHandleResponse(resp)
	return
}

// getFalseCreateRequest creates the GetFalse request.
func (client *BoolClient) getFalseCreateRequest(ctx context.Context, options *BoolClientGetFalseOptions) (*policy.Request, error) {
	urlPath := "/bool/false"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getFalseHandleResponse handles the GetFalse response.
func (client *BoolClient) getFalseHandleResponse(resp *http.Response) (result BoolClientGetFalseResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = BoolClientGetFalseResponse{}
		return
	}
	return result, nil
}

// GetInvalid - Get invalid Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientGetInvalidOptions contains the optional parameters for the BoolClient.GetInvalid method.
func (client *BoolClient) GetInvalid(ctx context.Context, options *BoolClientGetInvalidOptions) (result BoolClientGetInvalidResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.GetInvalid", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getInvalidCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getInvalidHandleResponse(resp)
	return
}

// getInvalidCreateRequest creates the GetInvalid request.
func (client *BoolClient) getInvalidCreateRequest(ctx context.Context, options *BoolClientGetInvalidOptions) (*policy.Request, error) {
	urlPath := "/bool/invalid"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidHandleResponse handles the GetInvalid response.
func (client *BoolClient) getInvalidHandleResponse(resp *http.Response) (result BoolClientGetInvalidResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = BoolClientGetInvalidResponse{}
		return
	}
	return result, nil
}

// GetNull - Get null Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientGetNullOptions contains the optional parameters for the BoolClient.GetNull method.
func (client *BoolClient) GetNull(ctx context.Context, options *BoolClientGetNullOptions) (result BoolClientGetNullResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.GetNull", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getNullHandleResponse(resp)
	return
}

// getNullCreateRequest creates the GetNull request.
func (client *BoolClient) getNullCreateRequest(ctx context.Context, options *BoolClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/bool/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *BoolClient) getNullHandleResponse(resp *http.Response) (result BoolClientGetNullResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = BoolClientGetNullResponse{}
		return
	}
	return result, nil
}

// GetTrue - Get true Boolean value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientGetTrueOptions contains the optional parameters for the BoolClient.GetTrue method.
func (client *BoolClient) GetTrue(ctx context.Context, options *BoolClientGetTrueOptions) (result BoolClientGetTrueResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.GetTrue", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getTrueCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getTrueHandleResponse(resp)
	return
}

// getTrueCreateRequest creates the GetTrue request.
func (client *BoolClient) getTrueCreateRequest(ctx context.Context, options *BoolClientGetTrueOptions) (*policy.Request, error) {
	urlPath := "/bool/true"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getTrueHandleResponse handles the GetTrue response.
func (client *BoolClient) getTrueHandleResponse(resp *http.Response) (result BoolClientGetTrueResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = BoolClientGetTrueResponse{}
		return
	}
	return result, nil
}

// PutFalse - Set Boolean value false
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientPutFalseOptions contains the optional parameters for the BoolClient.PutFalse method.
func (client *BoolClient) PutFalse(ctx context.Context, options *BoolClientPutFalseOptions) (result BoolClientPutFalseResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.PutFalse", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putFalseCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putFalseCreateRequest creates the PutFalse request.
func (client *BoolClient) putFalseCreateRequest(ctx context.Context, options *BoolClientPutFalseOptions) (*policy.Request, error) {
	urlPath := "/bool/false"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, false)
}

// PutTrue - Set Boolean value true
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - BoolClientPutTrueOptions contains the optional parameters for the BoolClient.PutTrue method.
func (client *BoolClient) PutTrue(ctx context.Context, options *BoolClientPutTrueOptions) (result BoolClientPutTrueResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "BoolClient.PutTrue", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putTrueCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putTrueCreateRequest creates the PutTrue request.
func (client *BoolClient) putTrueCreateRequest(ctx context.Context, options *BoolClientPutTrueOptions) (*policy.Request, error) {
	urlPath := "/bool/true"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, true)
}
