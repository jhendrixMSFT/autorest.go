//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package nonstringenumgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// FloatClient contains the methods for the Float group.
// Don't use this type directly, use a constructor function instead.
type FloatClient struct {
	internal *azcore.Client
}

// Get - Get a float enum
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2.0-preview
//   - options - FloatClientGetOptions contains the optional parameters for the FloatClient.Get method.
func (client *FloatClient) Get(ctx context.Context, options *FloatClientGetOptions) (result FloatClientGetResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FloatClient.Get", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getHandleResponse(resp)
	return
}

// getCreateRequest creates the Get request.
func (client *FloatClient) getCreateRequest(ctx context.Context, options *FloatClientGetOptions) (*policy.Request, error) {
	urlPath := "/nonStringEnums/float/get"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FloatClient) getHandleResponse(resp *http.Response) (result FloatClientGetResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = FloatClientGetResponse{}
		return
	}
	return result, nil
}

// Put - Put a float enum
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2.0-preview
//   - input - Input float enum.
//   - options - FloatClientPutOptions contains the optional parameters for the FloatClient.Put method.
func (client *FloatClient) Put(ctx context.Context, input FloatEnum, options *FloatClientPutOptions) (result FloatClientPutResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "FloatClient.Put", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putCreateRequest(ctx, input, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.putHandleResponse(resp)
	return
}

// putCreateRequest creates the Put request.
func (client *FloatClient) putCreateRequest(ctx context.Context, input FloatEnum, options *FloatClientPutOptions) (*policy.Request, error) {
	urlPath := "/nonStringEnums/float/put"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, input)
}

// putHandleResponse handles the Put response.
func (client *FloatClient) putHandleResponse(resp *http.Response) (result FloatClientPutResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = FloatClientPutResponse{}
		return
	}
	return result, nil
}
