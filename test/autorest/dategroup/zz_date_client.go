//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package dategroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
	"time"
)

// DateClient contains the methods for the Date group.
// Don't use this type directly, use a constructor function instead.
type DateClient struct {
	internal *azcore.Client
}

// GetInvalidDate - Get invalid date value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetInvalidDateOptions contains the optional parameters for the DateClient.GetInvalidDate method.
func (client *DateClient) GetInvalidDate(ctx context.Context, options *DateClientGetInvalidDateOptions) (result DateClientGetInvalidDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetInvalidDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getInvalidDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getInvalidDateHandleResponse(resp)
	return
}

// getInvalidDateCreateRequest creates the GetInvalidDate request.
func (client *DateClient) getInvalidDateCreateRequest(ctx context.Context, options *DateClientGetInvalidDateOptions) (*policy.Request, error) {
	urlPath := "/date/invaliddate"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getInvalidDateHandleResponse handles the GetInvalidDate response.
func (client *DateClient) getInvalidDateHandleResponse(resp *http.Response) (result DateClientGetInvalidDateResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetMaxDate - Get max date value 9999-12-31
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetMaxDateOptions contains the optional parameters for the DateClient.GetMaxDate method.
func (client *DateClient) GetMaxDate(ctx context.Context, options *DateClientGetMaxDateOptions) (result DateClientGetMaxDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetMaxDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getMaxDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getMaxDateHandleResponse(resp)
	return
}

// getMaxDateCreateRequest creates the GetMaxDate request.
func (client *DateClient) getMaxDateCreateRequest(ctx context.Context, options *DateClientGetMaxDateOptions) (*policy.Request, error) {
	urlPath := "/date/max"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMaxDateHandleResponse handles the GetMaxDate response.
func (client *DateClient) getMaxDateHandleResponse(resp *http.Response) (result DateClientGetMaxDateResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetMinDate - Get min date value 0000-01-01
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetMinDateOptions contains the optional parameters for the DateClient.GetMinDate method.
func (client *DateClient) GetMinDate(ctx context.Context, options *DateClientGetMinDateOptions) (result DateClientGetMinDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetMinDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getMinDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getMinDateHandleResponse(resp)
	return
}

// getMinDateCreateRequest creates the GetMinDate request.
func (client *DateClient) getMinDateCreateRequest(ctx context.Context, options *DateClientGetMinDateOptions) (*policy.Request, error) {
	urlPath := "/date/min"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getMinDateHandleResponse handles the GetMinDate response.
func (client *DateClient) getMinDateHandleResponse(resp *http.Response) (result DateClientGetMinDateResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetNull - Get null date value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetNullOptions contains the optional parameters for the DateClient.GetNull method.
func (client *DateClient) GetNull(ctx context.Context, options *DateClientGetNullOptions) (result DateClientGetNullResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetNull", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getNullCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getNullHandleResponse(resp)
	return
}

// getNullCreateRequest creates the GetNull request.
func (client *DateClient) getNullCreateRequest(ctx context.Context, options *DateClientGetNullOptions) (*policy.Request, error) {
	urlPath := "/date/null"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNullHandleResponse handles the GetNull response.
func (client *DateClient) getNullHandleResponse(resp *http.Response) (result DateClientGetNullResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetOverflowDate - Get overflow date value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetOverflowDateOptions contains the optional parameters for the DateClient.GetOverflowDate method.
func (client *DateClient) GetOverflowDate(ctx context.Context, options *DateClientGetOverflowDateOptions) (result DateClientGetOverflowDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetOverflowDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getOverflowDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getOverflowDateHandleResponse(resp)
	return
}

// getOverflowDateCreateRequest creates the GetOverflowDate request.
func (client *DateClient) getOverflowDateCreateRequest(ctx context.Context, options *DateClientGetOverflowDateOptions) (*policy.Request, error) {
	urlPath := "/date/overflowdate"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOverflowDateHandleResponse handles the GetOverflowDate response.
func (client *DateClient) getOverflowDateHandleResponse(resp *http.Response) (result DateClientGetOverflowDateResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// GetUnderflowDate - Get underflow date value
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - DateClientGetUnderflowDateOptions contains the optional parameters for the DateClient.GetUnderflowDate method.
func (client *DateClient) GetUnderflowDate(ctx context.Context, options *DateClientGetUnderflowDateOptions) (result DateClientGetUnderflowDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.GetUnderflowDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getUnderflowDateCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getUnderflowDateHandleResponse(resp)
	return
}

// getUnderflowDateCreateRequest creates the GetUnderflowDate request.
func (client *DateClient) getUnderflowDateCreateRequest(ctx context.Context, options *DateClientGetUnderflowDateOptions) (*policy.Request, error) {
	urlPath := "/date/underflowdate"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getUnderflowDateHandleResponse handles the GetUnderflowDate response.
func (client *DateClient) getUnderflowDateHandleResponse(resp *http.Response) (result DateClientGetUnderflowDateResponse, err error) {
	var aux *dateType
	if err = runtime.UnmarshalAsJSON(resp, &aux); err != nil {
		return
	}
	result.Value = (*time.Time)(aux)
	return result, nil
}

// PutMaxDate - Put max date value 9999-12-31
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - dateBody - date body
//   - options - DateClientPutMaxDateOptions contains the optional parameters for the DateClient.PutMaxDate method.
func (client *DateClient) PutMaxDate(ctx context.Context, dateBody time.Time, options *DateClientPutMaxDateOptions) (result DateClientPutMaxDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.PutMaxDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putMaxDateCreateRequest(ctx, dateBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putMaxDateCreateRequest creates the PutMaxDate request.
func (client *DateClient) putMaxDateCreateRequest(ctx context.Context, dateBody time.Time, options *DateClientPutMaxDateOptions) (*policy.Request, error) {
	urlPath := "/date/max"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, dateType(dateBody))
}

// PutMinDate - Put min date value 0000-01-01
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - dateBody - date body
//   - options - DateClientPutMinDateOptions contains the optional parameters for the DateClient.PutMinDate method.
func (client *DateClient) PutMinDate(ctx context.Context, dateBody time.Time, options *DateClientPutMinDateOptions) (result DateClientPutMinDateResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "DateClient.PutMinDate", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.putMinDateCreateRequest(ctx, dateBody, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// putMinDateCreateRequest creates the PutMinDate request.
func (client *DateClient) putMinDateCreateRequest(ctx context.Context, dateBody time.Time, options *DateClientPutMinDateOptions) (*policy.Request, error) {
	urlPath := "/date/min"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, dateType(dateBody))
}
