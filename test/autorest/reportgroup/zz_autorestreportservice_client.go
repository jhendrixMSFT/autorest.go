//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package reportgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
)

// AutoRestReportServiceClient contains the methods for the AutoRestReportService group.
// Don't use this type directly, use a constructor function instead.
type AutoRestReportServiceClient struct {
	internal *azcore.Client
}

// GetOptionalReport - Get optional test coverage report
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - AutoRestReportServiceClientGetOptionalReportOptions contains the optional parameters for the AutoRestReportServiceClient.GetOptionalReport
//     method.
func (client *AutoRestReportServiceClient) GetOptionalReport(ctx context.Context, options *AutoRestReportServiceClientGetOptionalReportOptions) (result AutoRestReportServiceClientGetOptionalReportResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "AutoRestReportServiceClient.GetOptionalReport", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getOptionalReportCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getOptionalReportHandleResponse(resp)
	return
}

// getOptionalReportCreateRequest creates the GetOptionalReport request.
func (client *AutoRestReportServiceClient) getOptionalReportCreateRequest(ctx context.Context, options *AutoRestReportServiceClientGetOptionalReportOptions) (*policy.Request, error) {
	urlPath := "/report/optional"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Qualifier != nil {
		reqQP.Set("qualifier", *options.Qualifier)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOptionalReportHandleResponse handles the GetOptionalReport response.
func (client *AutoRestReportServiceClient) getOptionalReportHandleResponse(resp *http.Response) (result AutoRestReportServiceClientGetOptionalReportResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = AutoRestReportServiceClientGetOptionalReportResponse{}
		return
	}
	return result, nil
}

// GetReport - Get test coverage report
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - AutoRestReportServiceClientGetReportOptions contains the optional parameters for the AutoRestReportServiceClient.GetReport
//     method.
func (client *AutoRestReportServiceClient) GetReport(ctx context.Context, options *AutoRestReportServiceClientGetReportOptions) (result AutoRestReportServiceClientGetReportResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "AutoRestReportServiceClient.GetReport", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getReportCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getReportHandleResponse(resp)
	return
}

// getReportCreateRequest creates the GetReport request.
func (client *AutoRestReportServiceClient) getReportCreateRequest(ctx context.Context, options *AutoRestReportServiceClientGetReportOptions) (*policy.Request, error) {
	urlPath := "/report"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Qualifier != nil {
		reqQP.Set("qualifier", *options.Qualifier)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getReportHandleResponse handles the GetReport response.
func (client *AutoRestReportServiceClient) getReportHandleResponse(resp *http.Response) (result AutoRestReportServiceClientGetReportResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		result = AutoRestReportServiceClientGetReportResponse{}
		return
	}
	return result, nil
}
