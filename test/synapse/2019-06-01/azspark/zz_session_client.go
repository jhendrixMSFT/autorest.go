//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azspark

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/tracing"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SessionClient contains the methods for the SparkSession group.
// Don't use this type directly, use a constructor function instead.
type SessionClient struct {
	internal *azcore.Client
	endpoint string
}

// CancelSparkSession - Cancels a running spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - options - SessionClientCancelSparkSessionOptions contains the optional parameters for the SessionClient.CancelSparkSession
//     method.
func (client *SessionClient) CancelSparkSession(ctx context.Context, sessionID int32, options *SessionClientCancelSparkSessionOptions) (result SessionClientCancelSparkSessionResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.CancelSparkSession", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.cancelSparkSessionCreateRequest(ctx, sessionID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// cancelSparkSessionCreateRequest creates the CancelSparkSession request.
func (client *SessionClient) cancelSparkSessionCreateRequest(ctx context.Context, sessionID int32, options *SessionClientCancelSparkSessionOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CancelSparkStatement - Kill a statement within a session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - statementID - Identifier for the statement.
//   - options - SessionClientCancelSparkStatementOptions contains the optional parameters for the SessionClient.CancelSparkStatement
//     method.
func (client *SessionClient) CancelSparkStatement(ctx context.Context, sessionID int32, statementID int32, options *SessionClientCancelSparkStatementOptions) (result SessionClientCancelSparkStatementResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.CancelSparkStatement", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.cancelSparkStatementCreateRequest(ctx, sessionID, statementID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.cancelSparkStatementHandleResponse(resp)
	return
}

// cancelSparkStatementCreateRequest creates the CancelSparkStatement request.
func (client *SessionClient) cancelSparkStatementCreateRequest(ctx context.Context, sessionID int32, statementID int32, options *SessionClientCancelSparkStatementOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}/statements/{statementId}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	urlPath = strings.ReplaceAll(urlPath, "{statementId}", url.PathEscape(strconv.FormatInt(int64(statementID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// cancelSparkStatementHandleResponse handles the CancelSparkStatement response.
func (client *SessionClient) cancelSparkStatementHandleResponse(resp *http.Response) (result SessionClientCancelSparkStatementResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.StatementCancellationResult); err != nil {
		result = SessionClientCancelSparkStatementResponse{}
		return
	}
	return result, nil
}

// CreateSparkSession - Create new spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sparkSessionOptions - Livy compatible batch job request payload.
//   - options - SessionClientCreateSparkSessionOptions contains the optional parameters for the SessionClient.CreateSparkSession
//     method.
func (client *SessionClient) CreateSparkSession(ctx context.Context, sparkSessionOptions SessionOptions, options *SessionClientCreateSparkSessionOptions) (result SessionClientCreateSparkSessionResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.CreateSparkSession", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.createSparkSessionCreateRequest(ctx, sparkSessionOptions, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.createSparkSessionHandleResponse(resp)
	return
}

// createSparkSessionCreateRequest creates the CreateSparkSession request.
func (client *SessionClient) createSparkSessionCreateRequest(ctx context.Context, sparkSessionOptions SessionOptions, options *SessionClientCreateSparkSessionOptions) (*policy.Request, error) {
	urlPath := "/sessions"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Detailed != nil {
		reqQP.Set("detailed", strconv.FormatBool(*options.Detailed))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sparkSessionOptions)
}

// createSparkSessionHandleResponse handles the CreateSparkSession response.
func (client *SessionClient) createSparkSessionHandleResponse(resp *http.Response) (result SessionClientCreateSparkSessionResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Session); err != nil {
		result = SessionClientCreateSparkSessionResponse{}
		return
	}
	return result, nil
}

// CreateSparkStatement - Create statement within a spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - sparkStatementOptions - Livy compatible batch job request payload.
//   - options - SessionClientCreateSparkStatementOptions contains the optional parameters for the SessionClient.CreateSparkStatement
//     method.
func (client *SessionClient) CreateSparkStatement(ctx context.Context, sessionID int32, sparkStatementOptions StatementOptions, options *SessionClientCreateSparkStatementOptions) (result SessionClientCreateSparkStatementResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.CreateSparkStatement", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.createSparkStatementCreateRequest(ctx, sessionID, sparkStatementOptions, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.createSparkStatementHandleResponse(resp)
	return
}

// createSparkStatementCreateRequest creates the CreateSparkStatement request.
func (client *SessionClient) createSparkStatementCreateRequest(ctx context.Context, sessionID int32, sparkStatementOptions StatementOptions, options *SessionClientCreateSparkStatementOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}/statements"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, sparkStatementOptions)
}

// createSparkStatementHandleResponse handles the CreateSparkStatement response.
func (client *SessionClient) createSparkStatementHandleResponse(resp *http.Response) (result SessionClientCreateSparkStatementResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Statement); err != nil {
		result = SessionClientCreateSparkStatementResponse{}
		return
	}
	return result, nil
}

// GetSparkSession - Gets a single spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - options - SessionClientGetSparkSessionOptions contains the optional parameters for the SessionClient.GetSparkSession method.
func (client *SessionClient) GetSparkSession(ctx context.Context, sessionID int32, options *SessionClientGetSparkSessionOptions) (result SessionClientGetSparkSessionResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.GetSparkSession", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getSparkSessionCreateRequest(ctx, sessionID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getSparkSessionHandleResponse(resp)
	return
}

// getSparkSessionCreateRequest creates the GetSparkSession request.
func (client *SessionClient) getSparkSessionCreateRequest(ctx context.Context, sessionID int32, options *SessionClientGetSparkSessionOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Detailed != nil {
		reqQP.Set("detailed", strconv.FormatBool(*options.Detailed))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSparkSessionHandleResponse handles the GetSparkSession response.
func (client *SessionClient) getSparkSessionHandleResponse(resp *http.Response) (result SessionClientGetSparkSessionResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Session); err != nil {
		result = SessionClientGetSparkSessionResponse{}
		return
	}
	return result, nil
}

// GetSparkSessions - List all spark sessions which are running under a particular spark pool.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - options - SessionClientGetSparkSessionsOptions contains the optional parameters for the SessionClient.GetSparkSessions
//     method.
func (client *SessionClient) GetSparkSessions(ctx context.Context, options *SessionClientGetSparkSessionsOptions) (result SessionClientGetSparkSessionsResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.GetSparkSessions", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getSparkSessionsCreateRequest(ctx, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getSparkSessionsHandleResponse(resp)
	return
}

// getSparkSessionsCreateRequest creates the GetSparkSessions request.
func (client *SessionClient) getSparkSessionsCreateRequest(ctx context.Context, options *SessionClientGetSparkSessionsOptions) (*policy.Request, error) {
	urlPath := "/sessions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.From != nil {
		reqQP.Set("from", strconv.FormatInt(int64(*options.From), 10))
	}
	if options != nil && options.Size != nil {
		reqQP.Set("size", strconv.FormatInt(int64(*options.Size), 10))
	}
	if options != nil && options.Detailed != nil {
		reqQP.Set("detailed", strconv.FormatBool(*options.Detailed))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSparkSessionsHandleResponse handles the GetSparkSessions response.
func (client *SessionClient) getSparkSessionsHandleResponse(resp *http.Response) (result SessionClientGetSparkSessionsResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.SessionCollection); err != nil {
		result = SessionClientGetSparkSessionsResponse{}
		return
	}
	return result, nil
}

// GetSparkStatement - Gets a single statement within a spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - statementID - Identifier for the statement.
//   - options - SessionClientGetSparkStatementOptions contains the optional parameters for the SessionClient.GetSparkStatement
//     method.
func (client *SessionClient) GetSparkStatement(ctx context.Context, sessionID int32, statementID int32, options *SessionClientGetSparkStatementOptions) (result SessionClientGetSparkStatementResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.GetSparkStatement", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getSparkStatementCreateRequest(ctx, sessionID, statementID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getSparkStatementHandleResponse(resp)
	return
}

// getSparkStatementCreateRequest creates the GetSparkStatement request.
func (client *SessionClient) getSparkStatementCreateRequest(ctx context.Context, sessionID int32, statementID int32, options *SessionClientGetSparkStatementOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}/statements/{statementId}"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	urlPath = strings.ReplaceAll(urlPath, "{statementId}", url.PathEscape(strconv.FormatInt(int64(statementID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSparkStatementHandleResponse handles the GetSparkStatement response.
func (client *SessionClient) getSparkStatementHandleResponse(resp *http.Response) (result SessionClientGetSparkStatementResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.Statement); err != nil {
		result = SessionClientGetSparkStatementResponse{}
		return
	}
	return result, nil
}

// GetSparkStatements - Gets a list of statements within a spark session.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - options - SessionClientGetSparkStatementsOptions contains the optional parameters for the SessionClient.GetSparkStatements
//     method.
func (client *SessionClient) GetSparkStatements(ctx context.Context, sessionID int32, options *SessionClientGetSparkStatementsOptions) (result SessionClientGetSparkStatementsResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.GetSparkStatements", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.getSparkStatementsCreateRequest(ctx, sessionID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	result, err = client.getSparkStatementsHandleResponse(resp)
	return
}

// getSparkStatementsCreateRequest creates the GetSparkStatements request.
func (client *SessionClient) getSparkStatementsCreateRequest(ctx context.Context, sessionID int32, options *SessionClientGetSparkStatementsOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}/statements"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSparkStatementsHandleResponse handles the GetSparkStatements response.
func (client *SessionClient) getSparkStatementsHandleResponse(resp *http.Response) (result SessionClientGetSparkStatementsResponse, err error) {
	if err = runtime.UnmarshalAsJSON(resp, &result.StatementCollection); err != nil {
		result = SessionClientGetSparkStatementsResponse{}
		return
	}
	return result, nil
}

// ResetSparkSessionTimeout - Sends a keep alive call to the current session to reset the session timeout.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2019-11-01-preview
//   - sessionID - Identifier for the session.
//   - options - SessionClientResetSparkSessionTimeoutOptions contains the optional parameters for the SessionClient.ResetSparkSessionTimeout
//     method.
func (client *SessionClient) ResetSparkSessionTimeout(ctx context.Context, sessionID int32, options *SessionClientResetSparkSessionTimeoutOptions) (result SessionClientResetSparkSessionTimeoutResponse, err error) {
	ctx, span := client.internal.Tracer().Start(ctx, "SessionClient.ResetSparkSessionTimeout", &tracing.SpanOptions{
		Kind: tracing.SpanKindInternal,
	})
	defer func() {
		if err != nil {
			span.AddError(err)
		}
		span.End()
	}()
	req, err := client.resetSparkSessionTimeoutCreateRequest(ctx, sessionID, options)
	if err != nil {
		return
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		err = runtime.NewResponseError(resp)
		return
	}
	return
}

// resetSparkSessionTimeoutCreateRequest creates the ResetSparkSessionTimeout request.
func (client *SessionClient) resetSparkSessionTimeoutCreateRequest(ctx context.Context, sessionID int32, options *SessionClientResetSparkSessionTimeoutOptions) (*policy.Request, error) {
	urlPath := "/sessions/{sessionId}/reset-timeout"
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(strconv.FormatInt(int64(sessionID), 10)))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	return req, nil
}
