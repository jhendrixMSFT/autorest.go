// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package uniongroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UnionStringExtensibleNamedClient - Describe union of string string | "b" | "c" but where the union is named and some of
// the variants are named
// Don't use this type directly, use [UnionClient.NewUnionStringExtensibleNamedClient] instead.
type UnionStringExtensibleNamedClient struct {
	internal *azcore.Client
}

// Get -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - UnionStringExtensibleNamedClientGetOptions contains the optional parameters for the UnionStringExtensibleNamedClient.Get
//     method.
func (client *UnionStringExtensibleNamedClient) Get(ctx context.Context, options *UnionStringExtensibleNamedClientGetOptions) (UnionStringExtensibleNamedClientGetResponse, error) {
	var err error
	const operationName = "UnionStringExtensibleNamedClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return UnionStringExtensibleNamedClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnionStringExtensibleNamedClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UnionStringExtensibleNamedClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *UnionStringExtensibleNamedClient) getCreateRequest(ctx context.Context, _ *UnionStringExtensibleNamedClientGetOptions) (*policy.Request, error) {
	urlPath := "/type/union/string-extensible-named"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *UnionStringExtensibleNamedClient) getHandleResponse(resp *http.Response) (UnionStringExtensibleNamedClientGetResponse, error) {
	result := UnionStringExtensibleNamedClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetResponse7); err != nil {
		return UnionStringExtensibleNamedClientGetResponse{}, err
	}
	return result, nil
}

// Send -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - UnionStringExtensibleNamedClientSendOptions contains the optional parameters for the UnionStringExtensibleNamedClient.Send
//     method.
func (client *UnionStringExtensibleNamedClient) Send(ctx context.Context, prop StringExtensibleNamedUnion, options *UnionStringExtensibleNamedClientSendOptions) (UnionStringExtensibleNamedClientSendResponse, error) {
	var err error
	const operationName = "UnionStringExtensibleNamedClient.Send"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.sendCreateRequest(ctx, prop, options)
	if err != nil {
		return UnionStringExtensibleNamedClientSendResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnionStringExtensibleNamedClientSendResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return UnionStringExtensibleNamedClientSendResponse{}, err
	}
	return UnionStringExtensibleNamedClientSendResponse{}, nil
}

// sendCreateRequest creates the Send request.
func (client *UnionStringExtensibleNamedClient) sendCreateRequest(ctx context.Context, prop StringExtensibleNamedUnion, _ *UnionStringExtensibleNamedClientSendOptions) (*policy.Request, error) {
	urlPath := "/type/union/string-extensible-named"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		Prop StringExtensibleNamedUnion `json:"prop"`
	}{
		Prop: prop,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
