// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strconv"
	"uniongroup"
)

// UnionIntsOnlyServer is a fake server for instances of the uniongroup.UnionIntsOnlyClient type.
type UnionIntsOnlyServer struct {
	// Get is the fake for method UnionIntsOnlyClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, options *uniongroup.UnionIntsOnlyClientGetOptions) (resp azfake.Responder[uniongroup.UnionIntsOnlyClientGetResponse], errResp azfake.ErrorResponder)

	// Send is the fake for method UnionIntsOnlyClient.Send
	// HTTP status codes to indicate success: http.StatusNoContent
	Send func(ctx context.Context, prop uniongroup.GetResponseProp3, options *uniongroup.UnionIntsOnlyClientSendOptions) (resp azfake.Responder[uniongroup.UnionIntsOnlyClientSendResponse], errResp azfake.ErrorResponder)
}

// NewUnionIntsOnlyServerTransport creates a new instance of UnionIntsOnlyServerTransport with the provided implementation.
// The returned UnionIntsOnlyServerTransport instance is connected to an instance of uniongroup.UnionIntsOnlyClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUnionIntsOnlyServerTransport(srv *UnionIntsOnlyServer) *UnionIntsOnlyServerTransport {
	return &UnionIntsOnlyServerTransport{srv: srv}
}

// UnionIntsOnlyServerTransport connects instances of uniongroup.UnionIntsOnlyClient to instances of UnionIntsOnlyServer.
// Don't use this type directly, use NewUnionIntsOnlyServerTransport instead.
type UnionIntsOnlyServerTransport struct {
	srv *UnionIntsOnlyServer
}

// Do implements the policy.Transporter interface for UnionIntsOnlyServerTransport.
func (u *UnionIntsOnlyServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UnionIntsOnlyServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "UnionIntsOnlyClient.Get":
		resp, err = u.dispatchGet(req)
	case "UnionIntsOnlyClient.Send":
		resp, err = u.dispatchSend(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (u *UnionIntsOnlyServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if u.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	respr, errRespr := u.srv.Get(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GetResponse6, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UnionIntsOnlyServerTransport) dispatchSend(req *http.Request) (*http.Response, error) {
	if u.srv.Send == nil {
		return nil, &nonRetriableError{errors.New("fake for method Send not implemented")}
	}
	type partialBodyParams struct {
		Prop GetResponseProp3 `json:"prop"`
	}
	body, err := server.UnmarshalRequestAsJSON[partialBodyParams](req)
	if err != nil {
		return nil, err
	}
	propParam, err := parseWithCast(prop, func(v string) (uniongroup.GetResponseProp3, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return uniongroup.GetResponseProp3(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.Send(req.Context(), body.Prop, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
