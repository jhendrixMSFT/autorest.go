// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// UnionServer is a fake server for instances of the uniongroup.UnionClient type.
type UnionServer struct {
	// UnionEnumsOnlyServer contains the fakes for client UnionEnumsOnlyClient
	UnionEnumsOnlyServer UnionEnumsOnlyServer

	// UnionFloatsOnlyServer contains the fakes for client UnionFloatsOnlyClient
	UnionFloatsOnlyServer UnionFloatsOnlyServer

	// UnionIntsOnlyServer contains the fakes for client UnionIntsOnlyClient
	UnionIntsOnlyServer UnionIntsOnlyServer

	// UnionMixedLiteralsServer contains the fakes for client UnionMixedLiteralsClient
	UnionMixedLiteralsServer UnionMixedLiteralsServer

	// UnionMixedTypesServer contains the fakes for client UnionMixedTypesClient
	UnionMixedTypesServer UnionMixedTypesServer

	// UnionModelsOnlyServer contains the fakes for client UnionModelsOnlyClient
	UnionModelsOnlyServer UnionModelsOnlyServer

	// UnionStringAndArrayServer contains the fakes for client UnionStringAndArrayClient
	UnionStringAndArrayServer UnionStringAndArrayServer

	// UnionStringExtensibleServer contains the fakes for client UnionStringExtensibleClient
	UnionStringExtensibleServer UnionStringExtensibleServer

	// UnionStringExtensibleNamedServer contains the fakes for client UnionStringExtensibleNamedClient
	UnionStringExtensibleNamedServer UnionStringExtensibleNamedServer

	// UnionStringsOnlyServer contains the fakes for client UnionStringsOnlyClient
	UnionStringsOnlyServer UnionStringsOnlyServer
}

// NewUnionServerTransport creates a new instance of UnionServerTransport with the provided implementation.
// The returned UnionServerTransport instance is connected to an instance of uniongroup.UnionClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUnionServerTransport(srv *UnionServer) *UnionServerTransport {
	return &UnionServerTransport{srv: srv}
}

// UnionServerTransport connects instances of uniongroup.UnionClient to instances of UnionServer.
// Don't use this type directly, use NewUnionServerTransport instead.
type UnionServerTransport struct {
	srv                                *UnionServer
	trMu                               sync.Mutex
	trUnionEnumsOnlyServer             *UnionEnumsOnlyServerTransport
	trUnionFloatsOnlyServer            *UnionFloatsOnlyServerTransport
	trUnionIntsOnlyServer              *UnionIntsOnlyServerTransport
	trUnionMixedLiteralsServer         *UnionMixedLiteralsServerTransport
	trUnionMixedTypesServer            *UnionMixedTypesServerTransport
	trUnionModelsOnlyServer            *UnionModelsOnlyServerTransport
	trUnionStringAndArrayServer        *UnionStringAndArrayServerTransport
	trUnionStringExtensibleServer      *UnionStringExtensibleServerTransport
	trUnionStringExtensibleNamedServer *UnionStringExtensibleNamedServerTransport
	trUnionStringsOnlyServer           *UnionStringsOnlyServerTransport
}

// Do implements the policy.Transporter interface for UnionServerTransport.
func (u *UnionServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (u *UnionServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "UnionEnumsOnlyClient":
		initServer(&u.trMu, &u.trUnionEnumsOnlyServer, func() *UnionEnumsOnlyServerTransport {
			return NewUnionEnumsOnlyServerTransport(&u.srv.UnionEnumsOnlyServer)
		})
		resp, err = u.trUnionEnumsOnlyServer.Do(req)
	case "UnionFloatsOnlyClient":
		initServer(&u.trMu, &u.trUnionFloatsOnlyServer, func() *UnionFloatsOnlyServerTransport {
			return NewUnionFloatsOnlyServerTransport(&u.srv.UnionFloatsOnlyServer)
		})
		resp, err = u.trUnionFloatsOnlyServer.Do(req)
	case "UnionIntsOnlyClient":
		initServer(&u.trMu, &u.trUnionIntsOnlyServer, func() *UnionIntsOnlyServerTransport {
			return NewUnionIntsOnlyServerTransport(&u.srv.UnionIntsOnlyServer)
		})
		resp, err = u.trUnionIntsOnlyServer.Do(req)
	case "UnionMixedLiteralsClient":
		initServer(&u.trMu, &u.trUnionMixedLiteralsServer, func() *UnionMixedLiteralsServerTransport {
			return NewUnionMixedLiteralsServerTransport(&u.srv.UnionMixedLiteralsServer)
		})
		resp, err = u.trUnionMixedLiteralsServer.Do(req)
	case "UnionMixedTypesClient":
		initServer(&u.trMu, &u.trUnionMixedTypesServer, func() *UnionMixedTypesServerTransport {
			return NewUnionMixedTypesServerTransport(&u.srv.UnionMixedTypesServer)
		})
		resp, err = u.trUnionMixedTypesServer.Do(req)
	case "UnionModelsOnlyClient":
		initServer(&u.trMu, &u.trUnionModelsOnlyServer, func() *UnionModelsOnlyServerTransport {
			return NewUnionModelsOnlyServerTransport(&u.srv.UnionModelsOnlyServer)
		})
		resp, err = u.trUnionModelsOnlyServer.Do(req)
	case "UnionStringAndArrayClient":
		initServer(&u.trMu, &u.trUnionStringAndArrayServer, func() *UnionStringAndArrayServerTransport {
			return NewUnionStringAndArrayServerTransport(&u.srv.UnionStringAndArrayServer)
		})
		resp, err = u.trUnionStringAndArrayServer.Do(req)
	case "UnionStringExtensibleClient":
		initServer(&u.trMu, &u.trUnionStringExtensibleServer, func() *UnionStringExtensibleServerTransport {
			return NewUnionStringExtensibleServerTransport(&u.srv.UnionStringExtensibleServer)
		})
		resp, err = u.trUnionStringExtensibleServer.Do(req)
	case "UnionStringExtensibleNamedClient":
		initServer(&u.trMu, &u.trUnionStringExtensibleNamedServer, func() *UnionStringExtensibleNamedServerTransport {
			return NewUnionStringExtensibleNamedServerTransport(&u.srv.UnionStringExtensibleNamedServer)
		})
		resp, err = u.trUnionStringExtensibleNamedServer.Do(req)
	case "UnionStringsOnlyClient":
		initServer(&u.trMu, &u.trUnionStringsOnlyServer, func() *UnionStringsOnlyServerTransport {
			return NewUnionStringsOnlyServerTransport(&u.srv.UnionStringsOnlyServer)
		})
		resp, err = u.trUnionStringsOnlyServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
