// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"uniongroup"
)

// UnionMixedLiteralsServer is a fake server for instances of the uniongroup.UnionMixedLiteralsClient type.
type UnionMixedLiteralsServer struct {
	// Get is the fake for method UnionMixedLiteralsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, options *uniongroup.UnionMixedLiteralsClientGetOptions) (resp azfake.Responder[uniongroup.UnionMixedLiteralsClientGetResponse], errResp azfake.ErrorResponder)

	// Send is the fake for method UnionMixedLiteralsClient.Send
	// HTTP status codes to indicate success: http.StatusNoContent
	Send func(ctx context.Context, sendRequest1 uniongroup.SendRequest1, options *uniongroup.UnionMixedLiteralsClientSendOptions) (resp azfake.Responder[uniongroup.UnionMixedLiteralsClientSendResponse], errResp azfake.ErrorResponder)
}

// NewUnionMixedLiteralsServerTransport creates a new instance of UnionMixedLiteralsServerTransport with the provided implementation.
// The returned UnionMixedLiteralsServerTransport instance is connected to an instance of uniongroup.UnionMixedLiteralsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewUnionMixedLiteralsServerTransport(srv *UnionMixedLiteralsServer) *UnionMixedLiteralsServerTransport {
	return &UnionMixedLiteralsServerTransport{srv: srv}
}

// UnionMixedLiteralsServerTransport connects instances of uniongroup.UnionMixedLiteralsClient to instances of UnionMixedLiteralsServer.
// Don't use this type directly, use NewUnionMixedLiteralsServerTransport instead.
type UnionMixedLiteralsServerTransport struct {
	srv *UnionMixedLiteralsServer
}

// Do implements the policy.Transporter interface for UnionMixedLiteralsServerTransport.
func (u *UnionMixedLiteralsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return u.dispatchToMethodFake(req, method)
}

func (u *UnionMixedLiteralsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "UnionMixedLiteralsClient.Get":
		resp, err = u.dispatchGet(req)
	case "UnionMixedLiteralsClient.Send":
		resp, err = u.dispatchSend(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (u *UnionMixedLiteralsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if u.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	respr, errRespr := u.srv.Get(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).GetResponse1, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (u *UnionMixedLiteralsServerTransport) dispatchSend(req *http.Request) (*http.Response, error) {
	if u.srv.Send == nil {
		return nil, &nonRetriableError{errors.New("fake for method Send not implemented")}
	}
	body, err := server.UnmarshalRequestAsJSON[uniongroup.SendRequest1](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := u.srv.Send(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
