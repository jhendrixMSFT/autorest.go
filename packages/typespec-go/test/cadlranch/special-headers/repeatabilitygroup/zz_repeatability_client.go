// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package repeatabilitygroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"time"
)

// RepeatabilityClient - Illustrates OASIS repeatability headers
// Don't use this type directly, use a constructor function instead.
type RepeatabilityClient struct {
	internal *azcore.Client
}

// ImmediateSuccess - Check we recognize Repeatability-Request-ID and Repeatability-First-Sent.
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - RepeatabilityClientImmediateSuccessOptions contains the optional parameters for the RepeatabilityClient.ImmediateSuccess
//     method.
func (client *RepeatabilityClient) ImmediateSuccess(ctx context.Context, options *RepeatabilityClientImmediateSuccessOptions) (RepeatabilityClientImmediateSuccessResponse, error) {
	var err error
	const operationName = "RepeatabilityClient.ImmediateSuccess"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.immediateSuccessCreateRequest(ctx, options)
	if err != nil {
		return RepeatabilityClientImmediateSuccessResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RepeatabilityClientImmediateSuccessResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return RepeatabilityClientImmediateSuccessResponse{}, err
	}
	resp, err := client.immediateSuccessHandleResponse(httpResp)
	return resp, err
}

// immediateSuccessCreateRequest creates the ImmediateSuccess request.
func (client *RepeatabilityClient) immediateSuccessCreateRequest(ctx context.Context, _ *RepeatabilityClientImmediateSuccessOptions) (*policy.Request, error) {
	urlPath := "/special-headers/repeatability/immediateSuccess"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Repeatability-First-Sent"] = []string{time.Now().UTC().Format(time.RFC1123)}
	uuid, err := runtime.NewUUID()
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Repeatability-Request-ID"] = []string{uuid}
	return req, nil
}

// immediateSuccessHandleResponse handles the ImmediateSuccess response.
func (client *RepeatabilityClient) immediateSuccessHandleResponse(resp *http.Response) (RepeatabilityClientImmediateSuccessResponse, error) {
	result := RepeatabilityClientImmediateSuccessResponse{}
	if val := resp.Header.Get("Repeatability-Result"); val != "" {
		result.RepeatabilityResult = (*ImmediateSuccessResponseRepeatabilityResult)(&val)
	}
	return result, nil
}
