// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"repeatabilitygroup"
)

// RepeatabilityServer is a fake server for instances of the repeatabilitygroup.RepeatabilityClient type.
type RepeatabilityServer struct {
	// ImmediateSuccess is the fake for method RepeatabilityClient.ImmediateSuccess
	// HTTP status codes to indicate success: http.StatusNoContent
	ImmediateSuccess func(ctx context.Context, options *repeatabilitygroup.RepeatabilityClientImmediateSuccessOptions) (resp azfake.Responder[repeatabilitygroup.RepeatabilityClientImmediateSuccessResponse], errResp azfake.ErrorResponder)
}

// NewRepeatabilityServerTransport creates a new instance of RepeatabilityServerTransport with the provided implementation.
// The returned RepeatabilityServerTransport instance is connected to an instance of repeatabilitygroup.RepeatabilityClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRepeatabilityServerTransport(srv *RepeatabilityServer) *RepeatabilityServerTransport {
	return &RepeatabilityServerTransport{srv: srv}
}

// RepeatabilityServerTransport connects instances of repeatabilitygroup.RepeatabilityClient to instances of RepeatabilityServer.
// Don't use this type directly, use NewRepeatabilityServerTransport instead.
type RepeatabilityServerTransport struct {
	srv *RepeatabilityServer
}

// Do implements the policy.Transporter interface for RepeatabilityServerTransport.
func (r *RepeatabilityServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToMethodFake(req, method)
}

func (r *RepeatabilityServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "RepeatabilityClient.ImmediateSuccess":
		resp, err = r.dispatchImmediateSuccess(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (r *RepeatabilityServerTransport) dispatchImmediateSuccess(req *http.Request) (*http.Response, error) {
	if r.srv.ImmediateSuccess == nil {
		return nil, &nonRetriableError{errors.New("fake for method ImmediateSuccess not implemented")}
	}
	respr, errRespr := r.srv.ImmediateSuccess(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).RepeatabilityResult; val != nil {
		resp.Header.Set("Repeatability-Result", string(*val))
	}
	return resp, nil
}
