// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package clientreqidgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ClientRequestIdClient - Azure client request id header configurations.
// Don't use this type directly, use NewClientRequestIdClientWithNoCredential() instead.
type ClientRequestIdClient struct {
	internal *azcore.Client
}

// ClientRequestIdClientOptions contains the optional values for creating a [ClientRequestIdClient].
type ClientRequestIdClientOptions struct {
	azcore.ClientOptions
}

// NewClientRequestIdClientWithNoCredential creates a new instance of [ClientRequestIdClient] with the specified values.
//   - options - ClientRequestIdClientOptions contains the optional values for creating a [ClientRequestIdClient]
func NewClientRequestIdClientWithNoCredential(options *ClientRequestIdClientOptions) (*ClientRequestIdClient, error) {
	if options == nil {
		options = &ClientRequestIdClientOptions{}
	}
	cl, err := azcore.NewClient(moduleName, moduleVersion, runtime.PipelineOptions{}, &options.ClientOptions)
	if err != nil {
		return nil, err
	}
	clientRequestIdClient := &ClientRequestIdClient{
		internal: cl,
	}
	return clientRequestIdClient, nil
}

// Get - Get operation with azure client request id header.
//   - options - ClientRequestIdClientGetOptions contains the optional parameters for the ClientRequestIdClient.Get method.
func (client *ClientRequestIdClient) Get(ctx context.Context, options *ClientRequestIdClientGetOptions) (ClientRequestIdClientGetResponse, error) {
	var err error
	const operationName = "ClientRequestIdClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return ClientRequestIdClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientRequestIdClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ClientRequestIdClientGetResponse{}, err
	}
	return ClientRequestIdClientGetResponse{}, nil
}

// getCreateRequest creates the Get request.
func (client *ClientRequestIdClient) getCreateRequest(ctx context.Context, options *ClientRequestIdClientGetOptions) (*policy.Request, error) {
	urlPath := "/special-headers/client-request-id"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.ClientRequestID != nil {
		req.Raw().Header["client-request-id"] = []string{*options.ClientRequestID}
	}
	return req, nil
}
