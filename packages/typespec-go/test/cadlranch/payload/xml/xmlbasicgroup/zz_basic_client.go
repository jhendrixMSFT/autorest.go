// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package xmlbasicgroup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// BasicClient - Sends and receives simple bodies in XML format.
// Don't use this type directly, use a constructor function instead.
type BasicClient struct {
	internal *azcore.Client
}

// GetModelWithArrayOfModel -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientGetModelWithArrayOfModelOptions contains the optional parameters for the BasicClient.GetModelWithArrayOfModel
//     method.
func (client *BasicClient) GetModelWithArrayOfModel(ctx context.Context, options *BasicClientGetModelWithArrayOfModelOptions) (BasicClientGetModelWithArrayOfModelResponse, error) {
	var err error
	const operationName = "BasicClient.GetModelWithArrayOfModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getModelWithArrayOfModelCreateRequest(ctx, options)
	if err != nil {
		return BasicClientGetModelWithArrayOfModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientGetModelWithArrayOfModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientGetModelWithArrayOfModelResponse{}, err
	}
	resp, err := client.getModelWithArrayOfModelHandleResponse(httpResp)
	return resp, err
}

// getModelWithArrayOfModelCreateRequest creates the GetModelWithArrayOfModel request.
func (client *BasicClient) getModelWithArrayOfModelCreateRequest(ctx context.Context, _ *BasicClientGetModelWithArrayOfModelOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithArrayOfModel"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getModelWithArrayOfModelHandleResponse handles the GetModelWithArrayOfModel response.
func (client *BasicClient) getModelWithArrayOfModelHandleResponse(resp *http.Response) (BasicClientGetModelWithArrayOfModelResponse, error) {
	result := BasicClientGetModelWithArrayOfModelResponse{}
	if err := runtime.UnmarshalAsXML(resp, &result.ModelWithArrayOfModel); err != nil {
		return BasicClientGetModelWithArrayOfModelResponse{}, err
	}
	return result, nil
}

// GetModelWithOptionalField -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientGetModelWithOptionalFieldOptions contains the optional parameters for the BasicClient.GetModelWithOptionalField
//     method.
func (client *BasicClient) GetModelWithOptionalField(ctx context.Context, options *BasicClientGetModelWithOptionalFieldOptions) (BasicClientGetModelWithOptionalFieldResponse, error) {
	var err error
	const operationName = "BasicClient.GetModelWithOptionalField"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getModelWithOptionalFieldCreateRequest(ctx, options)
	if err != nil {
		return BasicClientGetModelWithOptionalFieldResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientGetModelWithOptionalFieldResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientGetModelWithOptionalFieldResponse{}, err
	}
	resp, err := client.getModelWithOptionalFieldHandleResponse(httpResp)
	return resp, err
}

// getModelWithOptionalFieldCreateRequest creates the GetModelWithOptionalField request.
func (client *BasicClient) getModelWithOptionalFieldCreateRequest(ctx context.Context, _ *BasicClientGetModelWithOptionalFieldOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithOptionalField"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getModelWithOptionalFieldHandleResponse handles the GetModelWithOptionalField response.
func (client *BasicClient) getModelWithOptionalFieldHandleResponse(resp *http.Response) (BasicClientGetModelWithOptionalFieldResponse, error) {
	result := BasicClientGetModelWithOptionalFieldResponse{}
	if err := runtime.UnmarshalAsXML(resp, &result.ModelWithOptionalField); err != nil {
		return BasicClientGetModelWithOptionalFieldResponse{}, err
	}
	return result, nil
}

// GetModelWithSimpleArrays -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientGetModelWithSimpleArraysOptions contains the optional parameters for the BasicClient.GetModelWithSimpleArrays
//     method.
func (client *BasicClient) GetModelWithSimpleArrays(ctx context.Context, options *BasicClientGetModelWithSimpleArraysOptions) (BasicClientGetModelWithSimpleArraysResponse, error) {
	var err error
	const operationName = "BasicClient.GetModelWithSimpleArrays"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getModelWithSimpleArraysCreateRequest(ctx, options)
	if err != nil {
		return BasicClientGetModelWithSimpleArraysResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientGetModelWithSimpleArraysResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientGetModelWithSimpleArraysResponse{}, err
	}
	resp, err := client.getModelWithSimpleArraysHandleResponse(httpResp)
	return resp, err
}

// getModelWithSimpleArraysCreateRequest creates the GetModelWithSimpleArrays request.
func (client *BasicClient) getModelWithSimpleArraysCreateRequest(ctx context.Context, _ *BasicClientGetModelWithSimpleArraysOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithSimpleArrays"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getModelWithSimpleArraysHandleResponse handles the GetModelWithSimpleArrays response.
func (client *BasicClient) getModelWithSimpleArraysHandleResponse(resp *http.Response) (BasicClientGetModelWithSimpleArraysResponse, error) {
	result := BasicClientGetModelWithSimpleArraysResponse{}
	if err := runtime.UnmarshalAsXML(resp, &result.ModelWithSimpleArrays); err != nil {
		return BasicClientGetModelWithSimpleArraysResponse{}, err
	}
	return result, nil
}

// GetSimpleModel -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientGetSimpleModelOptions contains the optional parameters for the BasicClient.GetSimpleModel method.
func (client *BasicClient) GetSimpleModel(ctx context.Context, options *BasicClientGetSimpleModelOptions) (BasicClientGetSimpleModelResponse, error) {
	var err error
	const operationName = "BasicClient.GetSimpleModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getSimpleModelCreateRequest(ctx, options)
	if err != nil {
		return BasicClientGetSimpleModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientGetSimpleModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientGetSimpleModelResponse{}, err
	}
	resp, err := client.getSimpleModelHandleResponse(httpResp)
	return resp, err
}

// getSimpleModelCreateRequest creates the GetSimpleModel request.
func (client *BasicClient) getSimpleModelCreateRequest(ctx context.Context, _ *BasicClientGetSimpleModelOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/simpleModel"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSimpleModelHandleResponse handles the GetSimpleModel response.
func (client *BasicClient) getSimpleModelHandleResponse(resp *http.Response) (BasicClientGetSimpleModelResponse, error) {
	result := BasicClientGetSimpleModelResponse{}
	if err := runtime.UnmarshalAsXML(resp, &result.SimpleModel); err != nil {
		return BasicClientGetSimpleModelResponse{}, err
	}
	return result, nil
}

// PutModelWithArrayOfModel -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientPutModelWithArrayOfModelOptions contains the optional parameters for the BasicClient.PutModelWithArrayOfModel
//     method.
func (client *BasicClient) PutModelWithArrayOfModel(ctx context.Context, input ModelWithArrayOfModel, options *BasicClientPutModelWithArrayOfModelOptions) (BasicClientPutModelWithArrayOfModelResponse, error) {
	var err error
	const operationName = "BasicClient.PutModelWithArrayOfModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putModelWithArrayOfModelCreateRequest(ctx, input, options)
	if err != nil {
		return BasicClientPutModelWithArrayOfModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientPutModelWithArrayOfModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientPutModelWithArrayOfModelResponse{}, err
	}
	return BasicClientPutModelWithArrayOfModelResponse{}, nil
}

// putModelWithArrayOfModelCreateRequest creates the PutModelWithArrayOfModel request.
func (client *BasicClient) putModelWithArrayOfModelCreateRequest(ctx context.Context, input ModelWithArrayOfModel, _ *BasicClientPutModelWithArrayOfModelOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithArrayOfModel"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsXML(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// PutModelWithOptionalField -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientPutModelWithOptionalFieldOptions contains the optional parameters for the BasicClient.PutModelWithOptionalField
//     method.
func (client *BasicClient) PutModelWithOptionalField(ctx context.Context, input ModelWithOptionalField, options *BasicClientPutModelWithOptionalFieldOptions) (BasicClientPutModelWithOptionalFieldResponse, error) {
	var err error
	const operationName = "BasicClient.PutModelWithOptionalField"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putModelWithOptionalFieldCreateRequest(ctx, input, options)
	if err != nil {
		return BasicClientPutModelWithOptionalFieldResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientPutModelWithOptionalFieldResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientPutModelWithOptionalFieldResponse{}, err
	}
	return BasicClientPutModelWithOptionalFieldResponse{}, nil
}

// putModelWithOptionalFieldCreateRequest creates the PutModelWithOptionalField request.
func (client *BasicClient) putModelWithOptionalFieldCreateRequest(ctx context.Context, input ModelWithOptionalField, _ *BasicClientPutModelWithOptionalFieldOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithOptionalField"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsXML(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// PutModelWithSimpleArrays -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientPutModelWithSimpleArraysOptions contains the optional parameters for the BasicClient.PutModelWithSimpleArrays
//     method.
func (client *BasicClient) PutModelWithSimpleArrays(ctx context.Context, input ModelWithSimpleArrays, options *BasicClientPutModelWithSimpleArraysOptions) (BasicClientPutModelWithSimpleArraysResponse, error) {
	var err error
	const operationName = "BasicClient.PutModelWithSimpleArrays"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putModelWithSimpleArraysCreateRequest(ctx, input, options)
	if err != nil {
		return BasicClientPutModelWithSimpleArraysResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientPutModelWithSimpleArraysResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientPutModelWithSimpleArraysResponse{}, err
	}
	return BasicClientPutModelWithSimpleArraysResponse{}, nil
}

// putModelWithSimpleArraysCreateRequest creates the PutModelWithSimpleArrays request.
func (client *BasicClient) putModelWithSimpleArraysCreateRequest(ctx context.Context, input ModelWithSimpleArrays, _ *BasicClientPutModelWithSimpleArraysOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/modelWithSimpleArrays"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, input); err != nil {
		return nil, err
	}
	return req, nil
}

// PutSimpleModel -
// If the operation fails it returns an *azcore.ResponseError type.
//   - options - BasicClientPutSimpleModelOptions contains the optional parameters for the BasicClient.PutSimpleModel method.
func (client *BasicClient) PutSimpleModel(ctx context.Context, input SimpleModel, options *BasicClientPutSimpleModelOptions) (BasicClientPutSimpleModelResponse, error) {
	var err error
	const operationName = "BasicClient.PutSimpleModel"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.putSimpleModelCreateRequest(ctx, input, options)
	if err != nil {
		return BasicClientPutSimpleModelResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BasicClientPutSimpleModelResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BasicClientPutSimpleModelResponse{}, err
	}
	return BasicClientPutSimpleModelResponse{}, nil
}

// putSimpleModelCreateRequest creates the PutSimpleModel request.
func (client *BasicClient) putSimpleModelCreateRequest(ctx context.Context, input SimpleModel, _ *BasicClientPutSimpleModelOptions) (*policy.Request, error) {
	urlPath := "/payload/xml/basic/simpleModel"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{"application/xml"}
	if err := runtime.MarshalAsXML(req, input); err != nil {
		return nil, err
	}
	return req, nil
}
