// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"xmlbasicgroup"
)

// BasicServer is a fake server for instances of the xmlbasicgroup.BasicClient type.
type BasicServer struct {
	// GetModelWithArrayOfModel is the fake for method BasicClient.GetModelWithArrayOfModel
	// HTTP status codes to indicate success: http.StatusOK
	GetModelWithArrayOfModel func(ctx context.Context, options *xmlbasicgroup.BasicClientGetModelWithArrayOfModelOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientGetModelWithArrayOfModelResponse], errResp azfake.ErrorResponder)

	// GetModelWithOptionalField is the fake for method BasicClient.GetModelWithOptionalField
	// HTTP status codes to indicate success: http.StatusOK
	GetModelWithOptionalField func(ctx context.Context, options *xmlbasicgroup.BasicClientGetModelWithOptionalFieldOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientGetModelWithOptionalFieldResponse], errResp azfake.ErrorResponder)

	// GetModelWithSimpleArrays is the fake for method BasicClient.GetModelWithSimpleArrays
	// HTTP status codes to indicate success: http.StatusOK
	GetModelWithSimpleArrays func(ctx context.Context, options *xmlbasicgroup.BasicClientGetModelWithSimpleArraysOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientGetModelWithSimpleArraysResponse], errResp azfake.ErrorResponder)

	// GetSimpleModel is the fake for method BasicClient.GetSimpleModel
	// HTTP status codes to indicate success: http.StatusOK
	GetSimpleModel func(ctx context.Context, options *xmlbasicgroup.BasicClientGetSimpleModelOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientGetSimpleModelResponse], errResp azfake.ErrorResponder)

	// PutModelWithArrayOfModel is the fake for method BasicClient.PutModelWithArrayOfModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PutModelWithArrayOfModel func(ctx context.Context, input xmlbasicgroup.ModelWithArrayOfModel, options *xmlbasicgroup.BasicClientPutModelWithArrayOfModelOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientPutModelWithArrayOfModelResponse], errResp azfake.ErrorResponder)

	// PutModelWithOptionalField is the fake for method BasicClient.PutModelWithOptionalField
	// HTTP status codes to indicate success: http.StatusNoContent
	PutModelWithOptionalField func(ctx context.Context, input xmlbasicgroup.ModelWithOptionalField, options *xmlbasicgroup.BasicClientPutModelWithOptionalFieldOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientPutModelWithOptionalFieldResponse], errResp azfake.ErrorResponder)

	// PutModelWithSimpleArrays is the fake for method BasicClient.PutModelWithSimpleArrays
	// HTTP status codes to indicate success: http.StatusNoContent
	PutModelWithSimpleArrays func(ctx context.Context, input xmlbasicgroup.ModelWithSimpleArrays, options *xmlbasicgroup.BasicClientPutModelWithSimpleArraysOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientPutModelWithSimpleArraysResponse], errResp azfake.ErrorResponder)

	// PutSimpleModel is the fake for method BasicClient.PutSimpleModel
	// HTTP status codes to indicate success: http.StatusNoContent
	PutSimpleModel func(ctx context.Context, input xmlbasicgroup.SimpleModel, options *xmlbasicgroup.BasicClientPutSimpleModelOptions) (resp azfake.Responder[xmlbasicgroup.BasicClientPutSimpleModelResponse], errResp azfake.ErrorResponder)
}

// NewBasicServerTransport creates a new instance of BasicServerTransport with the provided implementation.
// The returned BasicServerTransport instance is connected to an instance of xmlbasicgroup.BasicClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBasicServerTransport(srv *BasicServer) *BasicServerTransport {
	return &BasicServerTransport{srv: srv}
}

// BasicServerTransport connects instances of xmlbasicgroup.BasicClient to instances of BasicServer.
// Don't use this type directly, use NewBasicServerTransport instead.
type BasicServerTransport struct {
	srv *BasicServer
}

// Do implements the policy.Transporter interface for BasicServerTransport.
func (b *BasicServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return b.dispatchToMethodFake(req, method)
}

func (b *BasicServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "BasicClient.GetModelWithArrayOfModel":
		resp, err = b.dispatchGetModelWithArrayOfModel(req)
	case "BasicClient.GetModelWithOptionalField":
		resp, err = b.dispatchGetModelWithOptionalField(req)
	case "BasicClient.GetModelWithSimpleArrays":
		resp, err = b.dispatchGetModelWithSimpleArrays(req)
	case "BasicClient.GetSimpleModel":
		resp, err = b.dispatchGetSimpleModel(req)
	case "BasicClient.PutModelWithArrayOfModel":
		resp, err = b.dispatchPutModelWithArrayOfModel(req)
	case "BasicClient.PutModelWithOptionalField":
		resp, err = b.dispatchPutModelWithOptionalField(req)
	case "BasicClient.PutModelWithSimpleArrays":
		resp, err = b.dispatchPutModelWithSimpleArrays(req)
	case "BasicClient.PutSimpleModel":
		resp, err = b.dispatchPutSimpleModel(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (b *BasicServerTransport) dispatchGetModelWithArrayOfModel(req *http.Request) (*http.Response, error) {
	if b.srv.GetModelWithArrayOfModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetModelWithArrayOfModel not implemented")}
	}
	respr, errRespr := b.srv.GetModelWithArrayOfModel(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ModelWithArrayOfModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchGetModelWithOptionalField(req *http.Request) (*http.Response, error) {
	if b.srv.GetModelWithOptionalField == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetModelWithOptionalField not implemented")}
	}
	respr, errRespr := b.srv.GetModelWithOptionalField(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ModelWithOptionalField, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchGetModelWithSimpleArrays(req *http.Request) (*http.Response, error) {
	if b.srv.GetModelWithSimpleArrays == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetModelWithSimpleArrays not implemented")}
	}
	respr, errRespr := b.srv.GetModelWithSimpleArrays(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).ModelWithSimpleArrays, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchGetSimpleModel(req *http.Request) (*http.Response, error) {
	if b.srv.GetSimpleModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSimpleModel not implemented")}
	}
	respr, errRespr := b.srv.GetSimpleModel(req.Context(), nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsXML(respContent, server.GetResponse(respr).SimpleModel, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchPutModelWithArrayOfModel(req *http.Request) (*http.Response, error) {
	if b.srv.PutModelWithArrayOfModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutModelWithArrayOfModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlbasicgroup.ModelWithArrayOfModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.PutModelWithArrayOfModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchPutModelWithOptionalField(req *http.Request) (*http.Response, error) {
	if b.srv.PutModelWithOptionalField == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutModelWithOptionalField not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlbasicgroup.ModelWithOptionalField](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.PutModelWithOptionalField(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchPutModelWithSimpleArrays(req *http.Request) (*http.Response, error) {
	if b.srv.PutModelWithSimpleArrays == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutModelWithSimpleArrays not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlbasicgroup.ModelWithSimpleArrays](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.PutModelWithSimpleArrays(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BasicServerTransport) dispatchPutSimpleModel(req *http.Request) (*http.Response, error) {
	if b.srv.PutSimpleModel == nil {
		return nil, &nonRetriableError{errors.New("fake for method PutSimpleModel not implemented")}
	}
	body, err := server.UnmarshalRequestAsXML[xmlbasicgroup.SimpleModel](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.PutSimpleModel(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
